" ==============================================================================
" Plastic's Vim config - 09/2013
" ==============================================================================
"
"	A. BASIC CONFIG
"		1. Interface
"		2. Colors
"		3. Indentation
"		4. Search
"		5. Status bar
"		6. Misc
"
"	B. 42 NORM C/C++
"		1. Space & Tab
"		2. Parenthesis
"		3. Line size limit
"		4. Auto header
"		5. Auto .h protect
"		6. Auto .sh env
"
"	C. PERSISTENCE
"		1. Backups
"		2. Swap files
"		2. Restore session
"		4. Save buffers
"		5. Undo history
"
"	D. PLUGINS
"		1. Pathogen
"		2. NERDTree
"		3. NERDCommenter
"
" ==============================================================================

" =========================
" A. BASIC CONFIG
" =========================

"1" Interface :
"--------------------
set title				" Display filename in title bar
set ttyfast				" More reactive displaying
set number				" Show line number
set mousehide			" Hide mouse cursor when typing
set mouse=a			" Disable mouse support
set showmode			" Show actual mode (full function only on zsh)
set showcmd				" Show incomplete command
set wildmenu			" Display command auto-completion with tab
"--------------------

"2" Colors :
"--------------------
set t_Co=256			" Enable 256 colors mode
syntax on				" Syntax coloration
colorscheme mustang		" Enable mustang theme
"--------------------

"3" Indentation :
"--------------------
set noexpandtab			" Disable tab to spaces
set tabstop=4			" 4 column by tab
set autoindent			" Same indent as previous lines
set smartindent			" Auto-indentation in while, if, etc...
set shiftwidth=4		" Auto-indent with 4 columns
"--------------------

"4" Search :
"--------------------
set history=500			" 500 command line history
set ignorecase			" Ignore case in search
set smartcase			" Don't ignore case when capitale is typed
set incsearch			" Highlight typed word during typing
set hlsearch			" Highlight typed word
"--------------------

"5" Status bar :
"--------------------
set laststatus=2				" Enable status bar
set statusline=					" Clear status bar
set statusline+=\ Buff:\ 		" Title buffer
set statusline+=%-2.2n			" Buffer number
set statusline+=%#Question#		" Set highlighting
set statusline+=\ \ \ 			" Separator
set statusline+=%0*				" Restore highlighting
set statusline+=\ File:\ 		" Title file
set statusline+=name=%f			" File name
set statusline+=\ -\ 			" Separator
set statusline+=form=%{&ff}		" File format
set statusline+=\ -\ 			" Separator
set statusline+=encod=%{&fenc}	" Encoding
set statusline+=\ -\ 			" Separator
set statusline+=type=%Y\ 		" File type
set statusline+=%#Question#		" Set highlighting
set statusline+=%=				" Ident to the right
set statusline+=%0*				" Restore highlighting
set statusline+=\ Pos:\ 		" Title position
set statusline+=ln=%l			" Line position
set statusline+=\ -\ 			" Separator
set statusline+=col=%c			" Column position
set statusline+=\ -\ 			" Separator
set statusline+=off=%<%P\ 		" Offset percent
set statusline+=%#Question#		" Set highlighting
set statusline+=\ \ \ 			" Separator
set statusline+=%0*				" Restore highlighting
set statusline+=\ ASCII:\ 		" Title ASCII
set statusline+=%3b\ 			" ASCII value
"--------------------

"6" Misc :
"--------------------
let mapleader = "!"		" Change assignation of leader key \ to !
set nocompatible		" Disable vi compatibility
set autoread			" Refresh current file when modified by another editor
set undolevels=500		" 500 undo history
set showmatch			" Show matching bracket
set matchtime=10		" Show matching bracket for 1 second
set scrolloff=5			" Display minimum five lines around the cursor
set sidescrolloff=5		" Display minimum five columns around the cursor
set cursorline			" Display horizontal line on the cursor position
set nowrap				" Don't wrap text on multiple lines
"set textwidth=78		" Max columns per line
"--------------------

" =========================
" B. 42 NORM C/C++
" =========================

"1" Space & Tab
"--------------------
highlight ExtraTabSpace ctermbg=red guibg=red
autocmd ColorScheme * highlight ExtraTabSpace ctermbg=red guibg=red
autocmd BufEnter *.{c,cpp,h,hpp} call matchadd('ExtraTabspace', '\(\s\+$\| \+\ze\t\|\t\zs \+\)\(\%#\)\@!')

highlight IndentSpace ctermbg=red guibg=red
autocmd ColorScheme * highlight IndentSpace ctermbg=red guibg=red
autocmd BufEnter *.{c,cpp,h,hpp} call matchadd('IndentSpace', '^\t*\zs \+')

highlight MultipleSpace ctermbg=red guibg=red
autocmd ColorScheme * highlight MultipleSpace ctermbg=red guibg=red
autocmd BufEnter *.{c,cpp,h,hpp} call matchadd('MultipleSpace', '\ \ ')

highlight SemicolonSpace ctermbg=red guibg=red
autocmd ColorScheme * highlight SemicolonSpace ctermbg=red guibg=red
autocmd BufEnter *.{c,cpp,h,hpp} call matchadd('SemicolonSpace', '\ \;')

highlight SizeofSpace ctermbg=red guibg=red
autocmd ColorScheme * highlight SiezofSpace ctermbg=red guibg=red
autocmd BufEnter *.{c,cpp,h,hpp} call matchadd('SizeofSpace', "sizeof ")
"--------------------

"2" Parenthesis
"--------------------
highlight IfParenthesis ctermbg=red guibg=red
autocmd ColorScheme * highlight IfParenthesis ctermbg=red guibg=red
autocmd BufEnter *.{c,cpp,h,hpp} call matchadd('IfParenthesis' , "if(")

highlight WhileParenthesis ctermbg=red guibg=red
autocmd ColorScheme * highlight WhileParenthesis ctermbg=red guibg=red
autocmd BufEnter *.{c,cpp,h,hpp} call matchadd('WhileParenthesis' , "while(")

highlight ReturnParenthesis ctermbg=red guibg=red
autocmd ColorScheme * highlight ReturnParenthesis ctermbg=red guibg=red
autocmd BufEnter *.{c,cpp,h,hpp} call matchadd('ReturnParenthesis' , "return(")

highlight EmptyParenthesis ctermbg=red guibg=red
autocmd ColorScheme * highlight EmptyParenthesis ctermbg=red guibg=red
autocmd BufEnter *.{c,cpp,h,hpp} call matchadd('EmptyParenthesis' , "()")
"--------------------

"3" Line size limit
"--------------------
highlight TooLongLine ctermbg=blue guibg=blue
autocmd ColorScheme * highlight TooLongLine ctermbg=red guibg=red
autocmd BufEnter *.{c,cpp,h,hpp} call matchadd('TooLongLine' , '\%>80v.\+', -1)
"--------------------

"4" Auto header
"--------------------
autocmd BufNewFile *.{c,cpp,h,hpp} :Stdheader
"--------------------

"5" Auto .h protect
"--------------------
function! s:insert_gates()
let gatename = substitute(toupper(expand("%:t")), "\\.", "_", "g")
	execute "normal! i#ifndef " . gatename
	execute "normal! o# define " . gatename
	execute "normal! o"
	execute "normal! Go#endif /* !" . gatename . " */"
	normal! kk
endfunction
autocmd BufNewFile *.{h,hpp} call <SID>insert_gates()
autocmd BufNewFile *.{h,hpp} :3
"--------------------

"6" Auto .sh env
"--------------------
function! s:insert_env()
	execute "normal! i#!/bin/sh"
	execute "normal! o"
	normal kk
endfunction
autocmd BufNewFile *.sh call <SID>insert_env()
autocmd BufNewFile *.sh :2
"--------------------

" =========================
" C. PERSISTENCE (By TWal)
" =========================

"1" Backups
"--------------------
if isdirectory($HOME . '/.vim/backup') == 0
	:silent !mkdir -p ~/.vim/backup >/dev/null 2>&1
endif
set backupdir-=.
set backupdir+=.
set backupdir-=~/
set backupdir^=~/.vim/backup/
set backup
"--------------------

"2" Swap files
"--------------------
if isdirectory($HOME . '/.vim/swap') == 0
	:silent !mkdir -p ~/.vim/swap >/dev/null 2>&1
endif
set directory=~/.vim/swap//
set directory+=.
"--------------------

"3" Restore session
"--------------------
set viminfo+=n~/.vim/viminfo
"--------------------

"4" Save buffers
"--------------------
map <F5> :mksession! .mysession.vim<CR>
"--------------------

"5" Undo history
"--------------------
if exists("+undofile")
	if isdirectory($HOME . '/.vim/undo') == 0
		:silent !mkdir -p ~/.vim/undo > /dev/null 2>&1
	endif
	set undodir=~/.vim/undo//
	set undodir=~/.vim/undo//
	set undofile
endif
"--------------------

" =========================
" D. PLUGINS
" =========================

"1" Pathogen
"--------------------
call pathogen#infect()
call pathogen#helptags()
"--------------------

"2" NERDTree
"--------------------
" Set toggle tree to Crtl+n and quit NERDTree on buffer quit
map <C-n> :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

let NERDTreeChDirMode=0		" NERDTree don't change working dir
let NERDTreeQuitOnOpen=1	" Hide NERDTree when file open

" Create bookmarks folder, set it for NERDTree and display bookmarks
if isdirectory($HOME . '/.vim/bookmarks') == 0
	:silent !mkdir -p ~/.vim/bookmarks > /dev/null 2>&1
endif
let NERDTreeBookmarksFile=$HOME . '/.vim/bookmarks/NERDTreeBookmarks'
let NERDTreeShowBookmarks=1

" List of ignored extensions
let NERDTreeIgnore=['.*\.o$', '.*\~$', '.*\.out$', '.*\.so$', '.*\.a$']
"--------------------

"3d" NERDCommenter
"--------------------
filetype plugin on
"--------------------
