# Create folder and jump to it
function md()
{
	if [[ $# -eq 1 ]]; then
		mkdir -p $1 && cd $1
	else
		echo "${fg[red]}Error:${reset_color} usage: md dir"
	fi
}

# Find files in path
function f()
{
	if [[ $# -eq 2 ]]; then
		find "$1" -iname "$2" 2> /dev/null
	else
		echo "${fg[red]}Error:${reset_color} usage: f dir pattern"
	fi
}

# Launch ssh session with tmux control
function tssh()
{
	local SESSION_NAME='aeddi_tssh'
	ssh $@ -t "bash -lc 'SESSION=\$(tmux ls -F \"#{session_name}\");				\
				if [[ ! \$(grep $SESSION_NAME <<< \$SESSION) ]]; then 				\
					tmux -CC new-session -s $SESSION_NAME -n \"tmux (\$HOSTNAME)\";	\
				else																\
					tmux -CC attach -t $SESSION_NAME;								\
				fi'"
}

# Merge classic git add / commit / push commands
function gitf()
{
	if [ "$#" -ne 1 ]; then
		echo "${fg[red]}Error:${reset_color} usage: gitf \"Commit message\"";
	else
		git add -A
		git commit -m $1
		git push
	fi
}

# Set terminal title
function rename-term()
{
	if [[ $# -eq 1 ]]; then
		if [[ -n "$TMUX" ]] ; then
			tmux rename-window $1
		else
			print -Pn  "\e]1;$1\a"
		fi
	else
		echo "${fg[red]}Error:${reset_color} usage: rename_term title"
	fi
}


### Project management functions ###
function github-create()
{
	local REPO_NAME=$(basename $(pwd) | tr '[A-Z]'  '[a-z]')
	local RET

	if [ -z "$GITHUB_TOKEN" ]; then
		echo "${fg[red]}Error:${reset_color} your GITHUB_TOKEN is not set"
		return 1
	fi

	if [[ $# -eq 0 ]]; then
		printf "${fg_bold[yellow]}Enter a repo name or hit enter to use '$REPO_NAME':${reset_color} "
		read INPUT
		[ -n "$INPUT" ] && REPO_NAME=$INPUT
	elif [[ $# -eq 1 ]]; then
		REPO_NAME=$1
	else
		echo '${fg[red]}Error:${reset_color} usage: github-create [repo_name]'
		return 1
	fi

	printf "${fg_bold[white]}Creating Github repo...${reset_color} "
	RET=$(curl -iu "aeddi:$GITHUB_TOKEN" https://api.github.com/user/repos -d '{"name":"'$REPO_NAME'"}' 2>&1)
	if [ -n "$(grep 'HTTP/1.1 201 Created' <<< $RET)" ]; then
		echo "${fg_bold[green]}success${reset_color}"
		return 0
	else
		echo "${fg_bold[red]}error${reset_color}"
		echo "$RET"
		return 1
	fi
}

function bitbucket-create()
{
	local REPO_NAME=$(basename $(pwd) | tr '[A-Z]'  '[a-z]')
	local RET

	if [ -z "$BITBUCKET_TOKEN" ]; then
		echo "${fg[red]}Error:${reset_color} your BITBUCKET_TOKEN is not set"
		return 1
	fi

	if [[ $# -eq 0 ]]; then
		printf "${fg_bold[yellow]}Enter a repo name or hit enter to use '$REPO_NAME':${reset_color} "
		read INPUT
		[ -n "$INPUT" ] && REPO_NAME=$INPUT
	elif [[ $# -eq 1 ]]; then
		REPO_NAME=$1
	else
		echo "${fg[red]}Error:${reset_color} usage: bitbucket-create [repo_name]"
		return 1
	fi

	printf "${fg_bold[yellow]}Do you want to make this repo private?${reset_color} [Y|n] "
	read INPUT
	if [[ $INPUT != 'n' && $INPUT != 'N' ]]; then
		printf "${fg_bold[white]}Creating private Bitbucket repo...${reset_color} "
		RET=$(curl -X POST -v -H "Content-Type: application/json" -u aeddi42:$BITBUCKET_TOKEN https://api.bitbucket.org/2.0/repositories/aeddi42/$REPO_NAME -d '{"scm": "git", "is_private": "true", "fork_policy": "no_public_forks"}' 2>&1)
	else
		printf "${fg_bold[white]}Creating public Bitbucket repo...${reset_color} "
		RET=$(curl -X POST -v -H "Content-Type: application/json" -u aeddi42:$BITBUCKET_TOKEN https://api.bitbucket.org/2.0/repositories/aeddi42/$REPO_NAME -d '{"scm": "git", "is_private": "false", "fork_policy": "allow_forks"}' 2>&1)
	fi

	if [ -n "$(grep 'HTTP/1.1 200 OK' <<< $RET)" ]; then
		echo "${fg_bold[green]}success${reset_color}"
		return 0
	else
		echo "${fg_bold[red]}error${reset_color}"
		echo "$RET"
		return 1
	fi
}

function init-project()
{
	local TEMPLATES_DIR=$(dirname $(readlink ${(%):-%x}))/templates
	local REPO_NAME=$(basename $(pwd) | tr '[A-Z]'  '[a-z]')
	local GITHUB=0
	local BITBUCKET=0
	local COMMIT_MES=''

	printf "${fg_bold[white]}Init project:${reset_color}\n"

	if [ ! -d .git ]; then
		printf "   - Init local git repository...\n"
		git init &> /dev/null
		COMMIT_MES='Init project'
	else
		COMMIT_MES='Add config files and/or add remote repos'
	fi

	if [ ! -f .gitignore ]; then
		printf "   - Adding .gitignore...\n"
		cp $TEMPLATES_DIR/gitignore .gitignore &> /dev/null
	fi
	if [ ! -f .editorconfig ]; then
		printf "   - Adding .editorconfig...\n"
		cp $TEMPLATES_DIR/editorconfig .editorconfig &> /dev/null
	fi

	printf "   - Git commit changes...\n"
	git add -A &> /dev/null
	git commit -m "$COMMIT_MES" &> /dev/null

	printf "\n${fg_bold[yellow]}Create a remote repo on Github?${reset_color} [Y|n] "
	read INPUT
	if [[ $INPUT != 'n' && $INPUT != 'N' ]]; then
		if github-create $REPO_NAME; then
			GITHUB=1
			git remote add github git@github.com:aeddi/$REPO_NAME &> /dev/null
		fi
		echo
	fi
	printf "${fg_bold[yellow]}Create a remote repo on Bitbucket?${reset_color} [Y|n] "
	read INPUT
	if [[ $INPUT != 'n' && $INPUT != 'N' ]]; then
		if bitbucket-create $REPO_NAME; then
			BITBUCKET=1
			git remote add bitbucket git@bitbucket.org:aeddi42/$REPO_NAME &> /dev/null
		fi
	fi

	if [[ $GITHUB -eq 1 || $BITBUCKET -eq 1 ]]; then
		printf "\n${fg_bold[white]}Setup remote repos:${reset_color}\n"

		printf "   - Adding a target alias 'all'...\n"
		echo '[remote "all"]' >> .git/config
		grep 'url =' .git/config >> .git/config

		printf "   - Push on remote repos...\n"
		git push -q -u --all all
	fi
}


### Display local and/or public ip ###

function myip()
{
	if [[ $# -eq 0 ]]; then
		get-public-ip
		get-local-ip
		get-torp-ip
		get-torb-ip
	elif [[ $1 == 'local' ]]; then
		get-local-ip
	elif [[ $1 == 'public' ]]; then
		get-public-ip
	elif [[ $1 == 'tor' ]]; then
		get-torp-ip
	elif [[ $1 == 'torb' ]]; then
		get-torb-ip
	else
		echo "${fg[red]}Error:${reset_color} usage: myip [local|public|tor|torb]"
	fi
}

function get-local-ip()
{
	FIRST=1
	INTERFACES=$(ifconfig | awk -F: '/^[a-z]+[0-9]/{printf "%s ", $1} END {print ""}')

	for INTERFACE in ${(z)INTERFACES}; do
		INFO=$(ifconfig $INTERFACE)
		INET=$(awk -F' ' '/^[[:space:]]+inet /{print $2}' <<< "$INFO")
		if [[ -n $INET && $INET != '127.0.0.1' ]]; then
			if [[ $FIRST == 1 ]]; then
				echo "Local IP:"
				FIRST=0
			fi
			printf "\t- $INTERFACE: $INET\n"
		fi
	done

	if [[ $FIRST == 1 ]]; then
		echo "Local IP: none"
	fi
}

function get-public-ip()
{
	PUBLICIP=$(curl -sS ipecho.net/plain 2> /dev/null)
	PUBLICIP=$([ ! $PUBLICIP ] && echo 'none' || echo "$PUBLICIP")
	echo "Public IP: $PUBLICIP"
}

funcion get-torp-ip()
{
	TORPIP=$(curl --proxy socks5://localhost:9050 -sS ipecho.net/plain 2> /dev/null)
	TORPIP=$([ ! $TORPIP ] && echo 'none' || echo "$TORPIP")
	echo "Tor Proxy IP: $TORPIP"
}

funcion get-torb-ip()
{
	TORBIP=$(curl --proxy socks5://localhost:9150 -sS ipecho.net/plain 2> /dev/null)
	TORBIP=$([ ! $TORBIP ] && echo 'none' || echo "$TORBIP")
	echo "Tor Browser IP: $TORBIP"
}

### Bookmarks navigation functions ###

export MARKPATH=$HOME/.marks

function jump {
    cd -P "$MARKPATH/$1" 2>/dev/null || echo "No such mark: $1"
}

function mark {
    mkdir -p "$MARKPATH"; ln -s "$(pwd)" "$MARKPATH/$1"
}

function unmark {
    rm -i "$MARKPATH/$1"
}

function marks {
    \ls -l "$MARKPATH" | tail -n +2 | sed 's/  / /g' | cut -d' ' -f9- | awk -F ' -> ' '{printf "%-10s -> %s\n", $1, $2}'
}

function _completemarks {
  reply=($(ls $MARKPATH))
}

compctl -K _completemarks jump
compctl -K _completemarks unmark
