" ==============================================================================
" aeddi's Vim config - 11/2016
" ==============================================================================
"
"	A. BASIC CONFIG
"		1. Interface
"		2. Colors
"		3. Indentation
"		4. Search
"		5. Key mapping
"		6. Commands
"		7. Misc
"		8. Yankless paste
"
"	B. PERSISTENCE
"		1. Backups
"		2. Swap files 3. Restore session
"		4. Save buffers
"		5. Undo history
"
"	C. PLUGINS
"		1. Vundle
"		2. Tomorrow-night
"		3. ALE
"		4. Mundo
"		5. YouCompleteMe
"		6. EasyMotion
"		7. Airline
"		8. Template
"		9. Rainbow Parentheses
"		10. UltiSnips
"		11. CtrlP
"		12. EditorConfig
"		13. vim-man
"		14. Taboo
"
" ==============================================================================

" ========================= A. BASIC CONFIG =========================
"1" Interface :
"--------------------
set title						" Display filename in title bar
set ttyfast						" More reactive displaying
set mousehide					" Hide mouse cursor when typing
set showcmd						" Show incomplete command
set wildmenu					" Display command auto-completion with tab
set splitbelow					" New horizontal split appears below
set splitright					" New vertical split appears on right
set number						" Enable aboslute numbers
set relativenumber				" And relative numbers (hybrid mode)
au InsertEnter * :set nornu		" Disable relative on insert
au InsertLeave * :set rnu		" Enable relative out of insert
"--------------------

"2" Colors :
"--------------------
if &term == "screen"
	set t_Co=256				" Enable 256 colors mode
endif
syntax on						" Syntax coloration
"--------------------

"3" Indentation :
"--------------------
set noexpandtab					" Disable tab to spaces
set autoindent					" Same indent as previous lines
set smartindent					" Auto-indentation in while, if, etc...
set tabstop=4					" 4 column by tab
set shiftwidth=4				" Auto-indent with 4 columns
set backspace=indent,eol,start	" Restore normal backspace comportement
"--------------------

"4" Search :
"--------------------
set history=500					" 500 command line history
set ignorecase					" Ignore case in search
set smartcase					" Don't ignore case when capitale is typed
set incsearch					" Highlight typed word during typing
set hlsearch					" Highlight typed word
"--------------------

"5" Keybindings :
"--------------------
" Enable/Disable paste mode
set pastetoggle=<F6>
" Replace escape key
imap ;j <Esc>
nmap ;j <Esc>
vmap ;j <Esc>
" Move between splits
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
" Switch between tabs
nnoremap { :tabprevious <CR>
nnoremap } :tabnext <CR>
" Switch between buffers
nnoremap [b :bprevious <CR>
nnoremap ]b :bnext <CR>

"6" Commands :
"--------------------
" Allow saving file as sudo
command! W :execute ':silent w !sudo tee % > /dev/null' | :edit!
command! Wq :execute ':W' | :q
command! WQ :Wq
" Reload vimrc
command! Resource :source $MYVIMRC
" Abreviation for tabnew
ca tn tabnew
"--------------------

"7" Misc :
"--------------------
set nocompatible				" Disable vi compatibility
set autoread					" Refresh current file when modified by another editor
set undolevels=500				" 500 undo history
set showmatch					" Show matching bracket
set matchtime=10				" Show matching bracket for 1 second
set scrolloff=5					" Display minimum five lines around the cursor
set sidescrolloff=15			" Display minimum five columns around the cursor
set cursorline					" Display horizontal line on the cursor position
set nowrap						" Don't wrap text on multiple lines
"--------------------

"8" Yankless paste :
"--------------------
function! RestoreRegister()
    let @" = s:restore_reg
    return ''
endfunction

function! s:Repl()
    let s:restore_reg = @"
    return "p@=RestoreRegister()\<cr>"
endfunction

vnoremap <silent> <expr> p <sid>Repl()
"--------------------


" =========================
" B. PERSISTENCE
" =========================

"1" Backups :
"--------------------
if isdirectory($HOME . '/.vim/backup') == 0
	:silent !mkdir -p ~/.vim/backup >/dev/null 2>&1
endif
set backupdir-=.
set backupdir+=.
set backupdir-=~/
set backupdir^=~/.vim/backup/
set backup
"--------------------

"2" Swap files :
"--------------------
if isdirectory($HOME . '/.vim/swap') == 0
	:silent !mkdir -p ~/.vim/swap >/dev/null 2>&1
endif
set directory=~/.vim/swap//
set directory+=.
"--------------------

"3" Restore session :
"--------------------
if !has('nvim')
	set viminfo+=n~/.vim/viminfo
endif
"--------------------

"4" Save/Restore buffers :
"--------------------
set sessionoptions+=tabpages,globals
map <F5> :mksession! .mysession.vim<CR>
"--------------------

"5" Undo history :
"--------------------
if exists("+undofile")
	if isdirectory($HOME . '/.vim/undo') == 0
		:silent !mkdir -p ~/.vim/undo > /dev/null 2>&1
	endif
	set undodir=~/.vim/undo//
	set undodir=~/.vim/undo//
	set undofile
endif
"--------------------


" =========================
" C. PLUGINS
" =========================

function! LoadLightPlugins()
	" Undo tree visualizer
	Plug 'simnalamburt/vim-mundo', {
		\'on': 'MundoToggle'
	\}
	Plug 'tpope/vim-commentary'				" Comment/uncomment lines
	Plug 'Lokaltog/vim-easymotion'			" Easier way of navigating within the file
	Plug 'ctrlpvim/ctrlp.vim'				" Fuzzy content (file, buffer, tags, etc...) finder
	Plug 'tpope/vim-fugitive'				" Provides git commands
	Plug 'airblade/vim-gitgutter'			" Mark lines edited since last commit
	Plug 'takac/vim-hardtime'				" Avoid using anti-pattern in vim

	" Colorize matching parentheses
	Plug 'luochen1990/rainbow', {
		\'on': 'RainbowToggle'
	\}
	Plug 'vim-scripts/matchit.zip'			" Bind more matches on % key press
	Plug 'tpope/vim-repeat'					" User-defined mappings can be repeated with . key
	Plug 'ntpeters/vim-better-whitespace'	" Removes trailing whitespaces on save
	Plug 'jiangmiao/auto-pairs'				" Auto-close brackets and other paired stuffs

	Plug 'gcmt/taboo.vim'					" Better tabs
	Plug 'vim-airline/vim-airline'			" Better status bar

	" JS / JSX / JSON / CSS / HTML beautifier
	Plug 'maksimr/vim-jsbeautify', {
		\'do': 'git submodule update --init --recursive'
	\}
	" Plug 'pangloss/vim-javascript'		" Javascript plugin for syntax and indentation
	" Plug 'mxw/vim-jsx'					" JSX plugin for syntax and indentation
	" Plug 'prettier/vim-prettier'			" Pretty format JS, CSS, TS, JSON, etc...
	Plug 'editorconfig/editorconfig-vim'	" Consistent coding styles across various editors
endfunction

function! LoadMediumPlugins()
	Plug 'aeddi/tomorrow-theme'				" Tuned tomorrow-night colorscheme
	Plug 'vim-airline/vim-airline-themes'	" Airline themes
endfunction

function! LoadHeavyPlugins()
	" Completion framework and language server client
	function! InstallCoc(info)
		if a:info.status == 'installed' || a:info.force
			call coc#util#install()
			call coc#util#install_extension([
				\'coc-tsserver',
				\'coc-python',
				\'coc-json',
				\'coc-yaml',
				\'coc-snippets',
				\'coc-css',
				\'coc-html',
				\'coc-svg'
			\])
		elseif a:info.status == 'updated'
			call coc#util#update_extensions(1)
		endif
	endfunction

	Plug 'neoclide/coc.nvim', {
		\'do': function('InstallCoc')
	\}
	Plug 'honza/vim-snippets'				" Snippets collection for many languages
endfunction

function! ConfigLightPlugins()
	" Mundo :
	"--------------------
	nnoremap U :MundoToggle<CR>
	"--------------------

	" EasyMotion :
	"--------------------
	map  / <Plug>(easymotion-sn)
	omap / <Plug>(easymotion-tn)

	map <Leader>l <Plug>(easymotion-lineforward)
	map <Leader>j <Plug>(easymotion-j)
	map <Leader>k <Plug>(easymotion-k)
	map <Leader>h <Plug>(easymotion-linebackward)

	let g:EasyMotion_startofline = 0	"Keep cursor column when JK motion
	"--------------------

	" CtrlP
	"--------------------
	let g:ctrlp_cache_dir = $HOME . '/.cache/ctrlp'
	if executable('ag')
	  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
	endif

	nnoremap <c-o> :CtrlPMRU<cr>
	nnoremap <c-t> :CtrlPTag<cr>
	let g:ctrlp_regexp = 0
	let g:ctrlp_show_hidden = 1
	let g:ctrlp_open_multiple_files = 'tj'
	let g:ctrlp_prompt_mappings = {
	\ 'AcceptSelection("h")': ['<c-s>', '<c-x>'],
	\ 'ToggleType(1)':        ['<c-l>', '<c-f>'],
	\ 'ToggleType(-1)':       ['<c-h>', '<c-b>'],
	\ }
	"--------------------

	" Gitgutter
	"-------------------
	let g:gitgutter_max_signs = 500
	nmap ]h <Plug>GitGutterNextHunk
	nmap [h <Plug>GitGutterPrevHunk
	"-------------------

	" Rainbow Parentheses :
	"--------------------
	let g:rainbow_active = 0
	nnoremap <leader>9 :RainbowToggle<CR>
	"--------------------

	" Better-Whitespace :
	"--------------------
	let g:strip_whitespace_on_save=1	" Strip on save
	let g:strip_whitespace_confirm=0	" Strip without confirmation
	let g:better_whitespace_enabled=0	" Don't highlight trailing whitespace
	"--------------------

	" Taboo
	"-------------------
	let g:taboo_tab_format = " #%N %f [%W] "
	let g:taboo_renamed_tab_format = " #%N %l [%W] "
	let g:taboo_modified_tab_flag = "*"
	let g:taboo_tabline = 0
	"--------------------

	" Airline :
	"--------------------
	set laststatus=2							"Always show airline
	let g:airline_powerline_fonts = 1			"Enable patched fonts
	let g:airline#extensions#tabline#enabled = 1
	let g:airline#extensions#tabline#left_sep = ""
	let g:airline#extensions#tabline#left_alt_sep = ""
	let g:airline#extensions#tabline#show_tab_nr = 0
	let g:airline#extensions#tabline#show_buffers = 0
	let g:airline#extensions#tabline#tab_min_count = 2
	let g:airline#extensions#tabline#show_close_button = 0
	let g:airline#extensions#tabline#show_tab_type = 0
	let g:airline#extensions#tabline#show_splits = 0
	set noshowmode
	"--------------------

	" JS-Beautify
	"--------------------
	function! Beautify()
		if &filetype == 'javascript'
			:call JsBeautify()
		elseif &filetype == 'json'
			:call JsonBeautify()
		elseif &filetype == 'jsx'
			:call JsxBeautify()
		elseif &filetype == 'html'
			:call HtmlBeautify()
		elseif &filetype == 'css'
			:call CSSBeautify()
		else
			:echo "No beautifier for '". &filetype . "' filetype"
		endif
	endfunction

	command! Beautify :call Beautify()
	"--------------------

	" EditorConfig
	"--------------------
	let g:EditorConfig_exclude_patterns = ['fugitive://.*']
	"--------------------
endfunction

function! ConfigMediumPlugins()
	" Tomorrow-night :
	"--------------------
	silent! colorscheme Tomorrow-Night		"Enable theme with silent! to avoid error on first launch
	"--------------------

	" Airline :
	"--------------------
	let g:airline_theme = 'tomorrow'
	"--------------------
endfunction

function! ConfigHeavyPlugins()
	" Coc :
	"--------------------
	set hidden			"If hidden is not set, TextEdit might fail.
	set cmdheight=2		"Better display for messages
	set updatetime=300	"Smaller updatetime for CursorHold & CursorHoldI
	set shortmess+=c	"Don't give |ins-completion-menu| messages.
	set signcolumn=yes	"Always show signcolumns

	" Some server have issues with backup files, see #649
	set nobackup
	set nowritebackup

	" Keybinds for completion
	inoremap <silent><expr> <C-j> pumvisible() ? "\<C-n>" : "\<C-j>"	"Scroll downward
	inoremap <expr> <C-k> pumvisible() ? "\<C-p>" : "\<C-k>"			"Scroll upward
	inoremap <expr> <C-l> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"		"Confirm completion
	inoremap <silent><expr> <c-space> coc#refresh()						"Trigger completion

	" Use `[c` and `]c` for navigate diagnostics
	nmap <silent> [c <Plug>(coc-diagnostic-prev)
	nmap <silent> ]c <Plug>(coc-diagnostic-next)

	" Remap keys for gotos
	nmap <silent> gd <Plug>(coc-definition)
	nmap <silent> gy <Plug>(coc-type-definition)
	nmap <silent> gi <Plug>(coc-implementation)
	nmap <silent> gr <Plug>(coc-references)

	" Use K for show documentation in preview window
	nnoremap <silent> K :call <SID>show_documentation()<CR>

	function! s:show_documentation()
	if &filetype == 'vim'
		execute 'h '.expand('<cword>')
	else
		call CocAction('doHover')
	endif
	endfunction

	" Highlight symbol under cursor on CursorHold
	autocmd CursorHold * silent call CocActionAsync('highlight')

	" Remap for rename current word
	nmap <leader>rn <Plug>(coc-rename)

	" Remap for format selected region
	vmap <leader>f  <Plug>(coc-format-selected)
	nmap <leader>f  <Plug>(coc-format-selected)

	augroup mygroup
		autocmd!
		" Setup formatexpr specified filetype(s).
		autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
		" Update signature help on jump placeholder
		autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
	augroup end

	" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
	vmap <leader>a  <Plug>(coc-codeaction-selected)
	nmap <leader>a  <Plug>(coc-codeaction-selected)

	" Remap for do codeAction of current line
	nmap <leader>ac  <Plug>(coc-codeaction)
	" Fix autofix problem of current line
	nmap <leader>qf  <Plug>(coc-fix-current)

	" Use `:Format` for format current buffer
	command! -nargs=0 Format :call CocAction('format')

	" if you want to disable auto detect, comment out those two lines
	let g:airline#extensions#disable_rtp_load = 1
	let g:airline_extensions = ['branch', 'hunks', 'coc']
	let g:airline_section_error = '%{airline#util#wrap(airline#extensions#coc#get_error(),0)}'
	let g:airline_section_warning = '%{airline#util#wrap(airline#extensions#coc#get_warning(),0)}'

	" Using CocList
	nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>	"Show all diagnostics
	nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>	"Manage extensions
	nnoremap <silent> <space>c  :<C-u>CocList commands<cr>		"Show commands
	nnoremap <silent> <space>o  :<C-u>CocList outline<cr>		"Find symbol of current document
	nnoremap <silent> <space>j  :<C-u>CocNext<CR>				"Do default action for next item.
	nnoremap <silent> <space>k  :<C-u>CocPrev<CR>				"Do default action for previous item.
	nnoremap <silent> <space>p  :<C-u>CocListResume<CR>			"Resume latest coc list
	"--------------------
endfunction

" vim-plug :
"--------------------
if empty(glob('~/.vim/autoload/plug.vim'))
	silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
		\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
	autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
if $VIMPLUG != 'NONE'
	call LoadLightPlugins()
	if $VIMPLUG != 'LIGHT'
		call LoadMediumPlugins()
		if $VIMPLUG != 'MEDIUM'
			call LoadHeavyPlugins()
		endif
	endif
endif
call plug#end()

if $VIMPLUG != 'NONE'
	call ConfigLightPlugins()
	if $VIMPLUG != 'LIGHT'
		call ConfigMediumPlugins()
		if $VIMPLUG != 'MEDIUM'
			call ConfigHeavyPlugins()
		endif
	endif
endif
"--------------------

" Include local file
"--------------------
let $LOCALFILE=expand("~/.vimrc_local")
if filereadable($LOCALFILE)
	source $LOCALFILE
endif
"--------------------
